name: AWS Deployment

on:
  workflow_dispatch:
    inputs:
      aws_access_key_id:
        description: "AWS Access Key ID from Learner Lab"
        required: true
        type: string
      aws_secret_access_key:
        description: "AWS Secret Access Key from Learner Lab"
        required: true
        type: string
      aws_session_token:
        description: "AWS Session Token from Learner Lab"
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_KEY: ${{ secrets.AWS_SSH_KEY }}
      VAULT_PASS: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}

    steps:
      - name: Mask runtime secrets
        run: |
          echo "::add-mask::$EC2_KEY"
          echo "::add-mask::$VAULT_PASS"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ github.event.inputs.aws_access_key_id }}
          aws-secret-access-key: ${{ github.event.inputs.aws_secret_access_key }}
          aws-session-token: ${{ github.event.inputs.aws_session_token }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Setup Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Terraform Init
        working-directory: ./aws/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./aws/terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./aws/terraform
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Output
        id: terraform_output
        working-directory: ./aws/terraform
        run: |
          INSTANCE_IP=$(terraform output -raw public_ip)
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "Instance IP: $INSTANCE_IP"

      - name: Add new CORS origin
        run: |
          IP=${{ steps.terraform_output.outputs.instance_ip }}
          CLIENT_URL="http://client.${IP}.nip.io:3000"
          sed -i "/APP_SECURITY_CORS_ALLOWED_ORIGINS_1:/a \      APP_SECURITY_CORS_ALLOWED_ORIGINS_2: $CLIENT_URL" ./aws/ansible/files/docker-compose.yml

      - name: Setup SSH Key
        run: |
          printf '%s\n' "$EC2_KEY" > aws/ansible/vockey.pem
          chmod 600 aws/ansible/vockey.pem
          echo "SSH key created successfully"

      - name: Copy config into ansible/files
        run: cp -r ./config ./aws/ansible/files/config

      - name: Setup Ansible Vault
        run: |
          printf '%s\n' "$VAULT_PASS" > aws/ansible/.vault_pass
          chmod 600 aws/ansible/.vault_pass

      - name: Update Ansible hosts file
        run: |
          IP_ADDRESS="${{ steps.terraform_output.outputs.instance_ip }}"
          DNS_NAME="ec2-${IP_ADDRESS//./-}.compute-1.amazonaws.com"

          cat > aws/ansible/hosts.ini << EOF
          [recipefy]
          $DNS_NAME

          [recipefy:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=vockey.pem
          ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          EOF

      - name: Wait for SSH to be available
        run: |
          for i in {1..20}; do
            if ssh -i aws/ansible/vockey.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@${{ steps.terraform_output.outputs.instance_ip }} 'echo "SSH is ready"' 2>/dev/null; then
              echo "SSH connection established successfully!"
              break
            fi
            echo "Attempt $i/20: SSH not ready yet, waiting 30 seconds..."
            sleep 30
          done

      - name: Run Ansible Playbook
        working-directory: ./aws/ansible
        run: |
          ansible-playbook -i hosts.ini playbook.yml --vault-password-file .vault_pass

      - name: Output Application URL
        run: |
          IP_ADDRESS="${{ steps.terraform_output.outputs.instance_ip }}"
          CLIENT_URL="http://client.${IP_ADDRESS}.nip.io:3000"
          echo "ðŸŽ‰ Deployment completed successfully!"
          echo "ðŸ”— $CLIENT_URL"

      - name: Cleanup sensitive files
        if: always()
        run: |
          rm -f aws/ansible/vockey.pem
          rm -f aws/ansible/.vault_pass

      - name: Terraform Destroy (on failure)
        if: failure()
        working-directory: ./aws/terraform
        run: |
          echo "Deployment failed, destroying infrastructure..."
          terraform destroy -auto-approve
